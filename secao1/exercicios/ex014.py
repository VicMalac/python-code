"""
üß† Desafio: Sistema de Controle de Estacionamento
üéØ Objetivo
Simular um sistema de estacionamento simples que calcula o tempo que um carro ficou estacionado e o valor a pagar, com base nas regras de cobran√ßa.

üöó Regras do sistema
O usu√°rio pode:

Registrar a entrada de um carro (placa e hor√°rio).

Registrar a sa√≠da de um carro (placa e hor√°rio).

Listar todos os carros estacionados no momento.

Ver quanto cada carro deve pagar ao sair.

Regras de cobran√ßa (exemplo):

At√© 1 hora: R$ 5,00

At√© 2 horas: R$ 9,00

At√© 3 horas: R$ 12,00

Acima de 3h: R$ 12,00 + R$ 3,00 por hora extra

O hor√°rio pode ser digitado no formato HH:MM (por exemplo, "14:30").

üì¶ Requisitos
Usar dicion√°rio para armazenar carros com a placa como chave e hor√°rio de entrada como valor.

Calcular a diferen√ßa de horas entre entrada e sa√≠da (use datetime.strptime() para converter string em tempo).

Mostrar o valor que deve ser pago com base no tempo.

Permitir m√∫ltiplos carros no estacionamento.

üí° Extras opcionais
Bloquear placas duplicadas (n√£o deixar registrar um carro j√° estacionado).

Adicionar um "log" de carros que j√° sa√≠ram.
"""
from datetime import datetime
from time import sleep
from os import system

entrada = 0
carro = {
    'DRH-8575' : {'entrada' : '12:30', 'saida' : '13:31', 'pagar' : ''},
    'CUY-5052' : {'entrada' : '13:51', 'saida' : '21:29', 'pagar' : ''},
}

placa = '0'; horaEntrada = '0'; horaSaida = '0'

pc, pv = list(carro.items())[0]

def calcularHora():
    for placa, horarios in carro.items():
        entrada = datetime.strptime(horarios['entrada'], "%H:%M")
        saida = datetime.strptime(horarios['saida'], '%H:%M')
        calculo = int((saida - entrada).total_seconds() // 3600)
        carro[placa]['pagar'] = f'{calculo}'


def registro(): # Registrando a entrada
    global placa, horaSaida, horaEntrada
    placa = input("Placa do carro: ").upper()
    if placa in carro:
        print("Este carro j√° est√° estacionado!")
        return 0
    horaEntrada = input("Entrada: ")
    horaSaida = input("Sa√≠da: ")
    carro[placa] = {
        'entrada': f'{horaEntrada}',
        'saida' : f'{horaSaida}'
    }
    print(f"{placa} registrado com sucesso!")


def listar():
    print('--- Carros Estacionados ---')
    for placa, horarios in carro.items():
        print(f"{placa} - Entrada: {horarios['entrada']} | Sa√≠da: {horarios['saida']} | Valor a pagar: R${horarios['pagar']}")


def pagar():
    for placa, horas in carro.items():
        pagamento = int(carro[placa]['pagar'])
        if pagamento == 1:
            carro[placa]['pagar'] = "5,00"
        elif pagamento == 2:
            carro[placa]['pagar'] = "9,00"
        elif pagamento <= 3 & pagamento > 2:
            carro[placa]['pagar'] = "12,00"
        else:
            carro[placa]['pagar'] = f"{12 + (pagamento - 3) * 3},00"


while entrada != "3":
    entrada = input("[1] Registrar carro\n"\
                    "[2] Listar carros\n"\
                    "[3] Sair\n"\
                    "Escolha uma op√ß√£o: "
                    )
    system("cls")
    match entrada:
        case '1':
            registro()
        case '2':
            calcularHora()
            pagar()
            listar()
        case '3':
            print("Obrigado por usar o nosso programa de estacionamento!")
            break
        case _:
            print("Op√ß√£o invalida!")


# placa = input("Digite a placa do carro (ou 'sair' para encerrar): ")
#     if placa.lower() == 'sair':
#         break

#     hora = input("Digite o hor√°rio de entrada do carro (formato HH:MM): ")
#     carro[placa] = hora  # Adiciona ao dicion√°rio